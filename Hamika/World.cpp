#include "World.h"

#include <algorithm>

#include <KIR/KIR4_algorithm.h>

namespace IO_HamSt1
{
	/*
	8   : signature             (binary)
	64  : HASH521               (binary)
	1   : type of encoder       (unsigned int8)
	128 : title of world        (string without null terminate)
	2   : number of blue prints (unsigned int16) [N]
		<-- N -->
		4 : index of blue print start  (unsigned int32)
		4 : size of blueprint          (unsigned int32) [S]
		<-- N -->
		S : data                       (binary)
	*/

	struct _signature
	{
		constexpr static size_t idx = 0;
		constexpr static size_t len = 8;
		typedef std::array<unsigned char, len> type;
	};
	struct _HASH521
	{
		constexpr static size_t idx = tail<_signature>();
		typedef KIR5::sha512digest type;
		constexpr static size_t len = std::extent<type>::value;
	};
	struct _typeOfEncoder
	{
		constexpr static size_t idx = tail<_HASH521>();
		typedef unsigned __int8 type;
		constexpr static size_t len = sizeof(type);
	};
	struct _titleOfWorld
	{
		constexpr static size_t idx = tail<_typeOfEncoder>();
		typedef std::string type;
		constexpr static size_t len = 128;
	};
	struct _numberOfBluePrints
	{
		constexpr static size_t idx = tail<_titleOfWorld>();
		typedef unsigned __int16 type;
		constexpr static size_t len = sizeof(type);
	};


	struct _indexOfBluePrintStart
	{
		constexpr static size_t idx = 0;
		typedef unsigned __int32 type;
		constexpr static size_t len = sizeof(type);
	};
	struct _sizeOfBluePrint
	{
		constexpr static size_t idx = tail<_indexOfBluePrintStart>();
		typedef unsigned __int32 type;
		constexpr static size_t len = sizeof(type);
	};


	constexpr _signature::type signature = {0x48, 0x61, 0x6D, 0x53, 0x74, 0x30, 0x30, 0x31};

	enum EncoderType: _typeOfEncoder::type
	{
		NONE = 0x00,
		ET_1 = 0x01,
	};

	constexpr std::array<unsigned char, 1024> ET_1data = {
		0x1f, 0xa9, 0x22, 0x2f, 0xa7, 0x6e, 0x93, 0xa9, 0xf0, 0x0c, 0x3c, 0x33, 0xce, 0x42, 0x2f, 0x47,
		0x3c, 0xa5, 0x08, 0x8d, 0x63, 0xf3, 0xf8, 0x1c, 0x5b, 0x46, 0xad, 0x9a, 0x07, 0x71, 0x9f, 0xf5,
		0x45, 0x5b, 0xbe, 0x0e, 0x57, 0x3c, 0x9a, 0xf6, 0x69, 0x96, 0x62, 0x19, 0xa3, 0xe5, 0xda, 0x14,
		0xf3, 0x53, 0x14, 0x2d, 0xa4, 0x8c, 0x4c, 0x71, 0x23, 0x09, 0xf4, 0x0a, 0xac, 0xc1, 0x0c, 0x4a,
		0xf2, 0xc9, 0x29, 0x43, 0x53, 0x46, 0xe0, 0x4f, 0x52, 0x75, 0xc2, 0x49, 0xf9, 0xc6, 0xab, 0xc4,
		0xad, 0x3c, 0xff, 0x30, 0x87, 0xb9, 0x19, 0xbd, 0x39, 0xc2, 0x19, 0x4b, 0x70, 0xbb, 0xe0, 0x13,
		0xb8, 0x08, 0xa7, 0x53, 0xe4, 0x3a, 0x22, 0x2d, 0xf7, 0x8c, 0x4c, 0x9d, 0x28, 0xd7, 0x77, 0x18,
		0xe6, 0xb9, 0xff, 0xf5, 0x6e, 0x01, 0xdc, 0x2f, 0xab, 0x94, 0xd6, 0x24, 0x6a, 0xa8, 0xb7, 0xb2,
		0xba, 0x75, 0x8a, 0x9f, 0xb8, 0x38, 0x39, 0xf8, 0xcd, 0x3c, 0xd1, 0x4c, 0xfe, 0xd2, 0xad, 0x14,
		0x57, 0x0f, 0xea, 0xbd, 0x3b, 0x15, 0x2a, 0x8d, 0x07, 0xc4, 0xb8, 0x2f, 0xc1, 0x34, 0x76, 0xc4,
		0x5d, 0x44, 0x90, 0x3c, 0xb4, 0x29, 0x29, 0x6c, 0x58, 0xc0, 0x01, 0x3a, 0x8d, 0x56, 0x49, 0x3d,
		0xbf, 0x73, 0x31, 0xec, 0xd1, 0x88, 0xdb, 0x5e, 0x76, 0x4d, 0xce, 0xf6, 0x66, 0x7f, 0x64, 0x61,
		0xff, 0xc2, 0x10, 0x97, 0x0e, 0x0b, 0xf8, 0xb6, 0xcd, 0x44, 0xfd, 0xa7, 0xb5, 0xa5, 0x54, 0x27,
		0x6b, 0x8f, 0xf6, 0xe8, 0xb4, 0x71, 0x32, 0xd5, 0x26, 0xa4, 0x0e, 0x74, 0x89, 0xca, 0x9a, 0x76,
		0xc0, 0x94, 0x4a, 0xc6, 0xd5, 0xfd, 0x57, 0x68, 0x1b, 0x60, 0x5e, 0x45, 0xf3, 0xf3, 0x25, 0x7c,
		0xd5, 0x22, 0xf3, 0xb4, 0xaf, 0x86, 0xa2, 0xb7, 0xa3, 0x82, 0xe7, 0x4a, 0x92, 0x00, 0x51, 0x4d,
		0xd9, 0xb5, 0x34, 0xd2, 0xfb, 0xd7, 0x0a, 0x71, 0xd5, 0x1d, 0xc8, 0x03, 0xea, 0x32, 0xf2, 0xae,
		0x36, 0x47, 0xf2, 0xb2, 0xae, 0x39, 0x19, 0xcf, 0xc1, 0x8b, 0xae, 0x6d, 0x88, 0xe6, 0x33, 0x9a,
		0xad, 0x0a, 0x41, 0x4c, 0x57, 0x1e, 0xd1, 0xc1, 0x85, 0xaa, 0x1a, 0xff, 0x71, 0x91, 0x44, 0x38,
		0x99, 0xec, 0xfc, 0xc0, 0xb3, 0xac, 0x0b, 0x20, 0xd4, 0xe3, 0x50, 0x18, 0xff, 0xdf, 0x55, 0xe4,
		0xa0, 0x3e, 0x60, 0xb0, 0xbd, 0x76, 0x55, 0xa3, 0x59, 0xdc, 0x16, 0x28, 0xab, 0x0b, 0x62, 0x6c,
		0xe4, 0xa3, 0x86, 0x15, 0x5f, 0x93, 0x55, 0x57, 0xb1, 0x7e, 0x3b, 0x4f, 0x1f, 0x20, 0x06, 0x71,
		0xe6, 0xc1, 0x43, 0x88, 0xa9, 0x78, 0x92, 0x14, 0xdc, 0x99, 0x49, 0x55, 0x3b, 0x18, 0x1d, 0xa2,
		0xce, 0x29, 0x6b, 0x60, 0x28, 0x78, 0xca, 0xd0, 0x35, 0x9e, 0x1f, 0x91, 0x79, 0x4b, 0x66, 0xc8,
		0x33, 0xf3, 0x3c, 0xe4, 0x0b, 0x4a, 0x5a, 0xa6, 0x5c, 0xa1, 0xc9, 0xb7, 0x0b, 0xb5, 0xf0, 0x6c,
		0xce, 0xb6, 0x04, 0xda, 0x49, 0x93, 0x61, 0x41, 0x7f, 0x97, 0x68, 0x93, 0xca, 0xde, 0x83, 0xa2,
		0xae, 0x6a, 0xe1, 0x61, 0x2c, 0x15, 0x44, 0xdc, 0x06, 0xc3, 0xaf, 0xec, 0x05, 0x10, 0x68, 0x0f,
		0x54, 0xca, 0xfd, 0x6f, 0xec, 0xec, 0xb2, 0x15, 0x6c, 0x9f, 0x5e, 0x82, 0x44, 0x2e, 0xd2, 0x3e,
		0xff, 0x1f, 0x0c, 0x03, 0x83, 0xd0, 0x98, 0x47, 0xe8, 0x08, 0x33, 0xae, 0x7c, 0x00, 0xd4, 0xbd,
		0x3f, 0xaa, 0xf8, 0x48, 0x4e, 0xea, 0xc7, 0x47, 0xdc, 0x65, 0x10, 0x8c, 0x2c, 0x1c, 0x5a, 0x6f,
		0x71, 0x37, 0x35, 0x8c, 0x04, 0xe4, 0x4e, 0x06, 0x30, 0x10, 0x25, 0x3c, 0x27, 0xc9, 0xc7, 0x91,
		0x6f, 0xaf, 0x14, 0x07, 0x5b, 0xd1, 0xb0, 0xfd, 0x54, 0x6f, 0x36, 0x25, 0x31, 0xe0, 0x46, 0x65,
		0x01, 0xe3, 0xf1, 0x0a, 0xda, 0xf5, 0x13, 0x9a, 0x2a, 0x5e, 0xe7, 0xfa, 0xc8, 0xfe, 0x20, 0x16,
		0x5f, 0x3e, 0x7e, 0x78, 0xe7, 0xe6, 0x2a, 0xe8, 0x8f, 0xef, 0xd0, 0x58, 0x50, 0xac, 0x6b, 0x2b,
		0xdb, 0xcd, 0x8c, 0xbf, 0x3e, 0x57, 0x58, 0x37, 0x68, 0x40, 0x1a, 0x5f, 0xcf, 0x5c, 0x3d, 0xc8,
		0x07, 0xb4, 0xdf, 0xfb, 0x97, 0x6d, 0x92, 0x6b, 0x53, 0x0c, 0xcc, 0x9b, 0x4e, 0xd9, 0x5a, 0x02,
		0x27, 0x92, 0xf2, 0x01, 0x02, 0x1d, 0x31, 0x87, 0x88, 0x26, 0x2b, 0x4f, 0x7b, 0xc7, 0xdc, 0xf6,
		0x4c, 0xaa, 0x66, 0xd1, 0xe2, 0xc4, 0xe4, 0xc7, 0x94, 0xc0, 0x03, 0x96, 0xa0, 0xe4, 0x07, 0x66,
		0x81, 0x4e, 0x64, 0x00, 0xcb, 0x78, 0xe9, 0x1c, 0xa9, 0xbf, 0xfb, 0xd2, 0xa9, 0x1b, 0xe4, 0x75,
		0x0e, 0x07, 0xd5, 0x85, 0x93, 0xd6, 0xee, 0x86, 0xcf, 0x70, 0x23, 0xb6, 0xf3, 0xb4, 0x2c, 0xb4,
		0x19, 0xf9, 0xb5, 0xcd, 0xa5, 0x94, 0x0b, 0xbe, 0x21, 0x95, 0xef, 0x96, 0x61, 0x97, 0xbf, 0x37,
		0x6e, 0x9c, 0x51, 0x99, 0x86, 0x3d, 0x14, 0x90, 0xd2, 0xb9, 0x39, 0x24, 0x8f, 0x15, 0x8e, 0x71,
		0xb2, 0xba, 0xe5, 0xd7, 0x96, 0x52, 0x58, 0x45, 0x0c, 0xf7, 0x1a, 0xc6, 0x84, 0xc9, 0x02, 0x5f,
		0x8b, 0xc7, 0x6d, 0xbe, 0x64, 0xa1, 0x34, 0xae, 0xb5, 0x44, 0x19, 0x33, 0xc4, 0xfe, 0xa2, 0x07,
		0xd8, 0xd0, 0xc9, 0x13, 0x28, 0x99, 0x69, 0x9d, 0x64, 0xdf, 0xfe, 0x16, 0x89, 0x31, 0x74, 0x1a,
		0x94, 0x75, 0x7e, 0x9d, 0xce, 0xcd, 0xa3, 0x78, 0x24, 0x0a, 0x5b, 0x7d, 0xb0, 0x5e, 0xa3, 0x5d,
		0x54, 0xef, 0xf2, 0x37, 0x55, 0x8b, 0x7b, 0x8c, 0x39, 0xa6, 0xcf, 0x74, 0xc5, 0x9b, 0x38, 0x71,
		0x4d, 0xaf, 0xf2, 0xd1, 0x89, 0x59, 0x11, 0xd9, 0xe5, 0xc1, 0xed, 0x0f, 0x60, 0xb9, 0x3e, 0x29,
		0xb3, 0x31, 0x68, 0x4f, 0x1a, 0x19, 0x3c, 0x60, 0x79, 0x16, 0x09, 0xd0, 0x45, 0xab, 0xda, 0xcb,
		0xa1, 0xcc, 0x5a, 0x9b, 0x05, 0x0e, 0x73, 0xf2, 0x54, 0x75, 0x4a, 0x43, 0x01, 0x17, 0x8d, 0x52,
		0x6f, 0xed, 0x0c, 0x0c, 0xbd, 0xd9, 0x12, 0xf1, 0x26, 0x39, 0xfd, 0x07, 0xef, 0x5b, 0xe2, 0x0a,
		0x09, 0xaa, 0xde, 0x19, 0x82, 0x8e, 0xcc, 0xda, 0x5c, 0x2a, 0x9b, 0xc3, 0x15, 0xca, 0x4a, 0x48,
		0x84, 0x0a, 0x90, 0x82, 0x78, 0xa8, 0x81, 0x5d, 0xb7, 0xc4, 0x42, 0x7c, 0x8a, 0x6a, 0x5b, 0x63,
		0x4b, 0x86, 0xa0, 0x18, 0x17, 0xe1, 0x4b, 0x19, 0xc9, 0xe8, 0x09, 0x44, 0x9e, 0xec, 0xf7, 0x99,
		0xa6, 0xb3, 0x5e, 0x74, 0x21, 0x14, 0xe0, 0xc4, 0x21, 0x20, 0x1e, 0xb0, 0x23, 0xbf, 0x9c, 0xa1,
		0x39, 0x23, 0x68, 0xd5, 0x64, 0x55, 0xa2, 0x8f, 0xd2, 0x2f, 0x23, 0x01, 0x01, 0x9c, 0x99, 0x21,
		0x18, 0xee, 0x51, 0x9a, 0xac, 0x90, 0x93, 0x6c, 0x3d, 0xf2, 0xbe, 0xa5, 0x49, 0xfe, 0xdd, 0x93,
		0xf9, 0x45, 0x18, 0xe9, 0x76, 0x93, 0x86, 0x51, 0x83, 0x41, 0x3d, 0x89, 0x83, 0x8b, 0xf4, 0xfa,
		0x99, 0xb6, 0x21, 0x3d, 0x3b, 0x4b, 0x62, 0x80, 0x8d, 0x85, 0xeb, 0x12, 0x96, 0xca, 0x80, 0xc7,
		0x7b, 0x5c, 0x9f, 0xbb, 0x61, 0x13, 0x72, 0xec, 0x0e, 0xdb, 0x64, 0x23, 0xfa, 0x5d, 0x8a, 0xd1,
		0xdd, 0xbf, 0x28, 0x6a, 0x03, 0x50, 0xba, 0xd0, 0xec, 0xd8, 0x49, 0xb6, 0x4f, 0xff, 0x06, 0xe6,
		0x2b, 0x43, 0xce, 0x16, 0x07, 0xa9, 0x3f, 0x98, 0xf9, 0x2b, 0x4b, 0x37, 0x3f, 0xaf, 0x1b, 0xc2,
		0x40, 0x17, 0xad, 0xf4, 0xa5, 0xb2, 0xe9, 0x9e, 0x45, 0x48, 0x79, 0x16, 0x57, 0x6c, 0x12, 0x3d,
		0xb2, 0x38, 0x6c, 0x27, 0xf3, 0x38, 0xf2, 0x01, 0x8d, 0x18, 0x94, 0x03, 0xc7, 0xfc, 0x7e, 0x8d,
	};

	bool isType(const std::vector<unsigned char> &data)
	{
		return std::equal(signature.begin(), signature.end(), data.begin());
	}
	bool load(const std::vector<unsigned char> &buffer, World &world)
	{
		KIR5::sha512digest calcHash;
		KIR5::sha512digest origHash;
		KIR5::sha512(calcHash, &buffer[_typeOfEncoder::idx], buffer.size() - _typeOfEncoder::idx);
		getDx<_HASH521>(origHash, buffer);
		if (memcmp(calcHash, origHash, KIR5::SHA512_DIGEST_SIZE) != 0)
		{
			return false;
		}

		_typeOfEncoder::type ecoderType = EncoderType::NONE;
		getDx<_typeOfEncoder>(ecoderType, buffer);
		if (ecoderType == EncoderType::NONE)
		{

		}
		else if (ecoderType == EncoderType::ET_1)
		{
			KIR4::encryption_pattern(const_cast<unsigned char *>(&buffer[tail<_typeOfEncoder>()]), buffer.size() - tail<_typeOfEncoder>(), ET_1data.data(), ET_1data.size());
		}
		else
		{
			return false;
		}

		std::string title;
		getDx<_titleOfWorld>(title, buffer);
		world.setTitle(title);

		_numberOfBluePrints::type numberOfBluePrints = 0;
		getDx<_numberOfBluePrints>(numberOfBluePrints, buffer);
		std::vector<std::shared_ptr<BluePrint>> bluePrints(numberOfBluePrints);

		size_t idx = tail<_numberOfBluePrints>();
		for (auto &it : bluePrints)
		{
			it = std::shared_ptr<BluePrint>(new BluePrint());

			_indexOfBluePrintStart::type indexOfBluePrintStart = 0;
			_sizeOfBluePrint::type sizeOfBluePrint = 0;

			getDx<_indexOfBluePrintStart>(indexOfBluePrintStart, buffer, idx);
			getDx<_sizeOfBluePrint>(sizeOfBluePrint, buffer, idx);

			auto begin = buffer.begin() + indexOfBluePrintStart;
			auto end = begin + sizeOfBluePrint;

			BluePrint::IO_HamSt1 io;
			if (!io.load(std::vector<unsigned char>(begin, end), it))
			{
				return false;
			}

			idx += tail<_sizeOfBluePrint>();
		}
		world.setBluePrints(bluePrints);

		return true;
	}
	bool save(std::vector<unsigned char> &buffer, const World &world)
	{
		setDx<_signature>(signature, buffer);
		_typeOfEncoder::type ecoderType = EncoderType::ET_1;
		setDx<_typeOfEncoder>(ecoderType, buffer);
		setDx<_titleOfWorld>(world.getTitle(), buffer);
		setDx<_numberOfBluePrints>(static_cast<_numberOfBluePrints::type>(world.getBluePrints().size()), buffer);

		size_t idx = tail<_numberOfBluePrints>();
		buffer.resize(buffer.size() + world.getBluePrints().size() * tail<_sizeOfBluePrint>());
		for (auto &it : world.getBluePrints())
		{
			std::vector<unsigned char> bluePrintBuffer;
			BluePrint::IO_HamSt1 io;
			if (!io.save(bluePrintBuffer, it))
			{
				return false;
			}

			setDx<_indexOfBluePrintStart>(buffer.size(), buffer, idx);
			setDx<_sizeOfBluePrint>(bluePrintBuffer.size(), buffer, idx);

			buffer.insert(buffer.end(), bluePrintBuffer.begin(), bluePrintBuffer.end());

			idx += tail<_sizeOfBluePrint>();
		}

		if (ecoderType == EncoderType::NONE)
		{

		}
		else if (ecoderType == EncoderType::ET_1)
		{
			KIR4::encryption_pattern(&buffer[tail<_typeOfEncoder>()], buffer.size() - tail<_typeOfEncoder>(), ET_1data.data(), ET_1data.size());
		}
		else
		{
			return false;
		}

		KIR5::sha512digest hash;
		KIR5::sha512(hash, &buffer[_typeOfEncoder::idx], buffer.size() - _typeOfEncoder::idx);
		setDx<_HASH521>(hash, buffer);

		return true;
	}
}
namespace IO_HamBC
{
	bool isType(const std::vector<unsigned char> &data)
	{
		return data.size() % BluePrint::IO_HamBC::MAP_SIZE == 0;
	}
	bool load(const std::vector<unsigned char> &buffer, World &world)
	{
		std::vector<std::shared_ptr<BluePrint>> bluePrints;
		if (buffer.size() % BluePrint::IO_HamBC::MAP_SIZE == 0)
		{
			int numberOfBluePrints = buffer.size() / BluePrint::IO_HamBC::MAP_SIZE;
			for (int i = 0; i < numberOfBluePrints; ++i)
			{
				std::shared_ptr<BluePrint> _ptrBluePrint(new BluePrint());
				BluePrint::IO_HamBC io;
				auto begin = buffer.begin() + i * BluePrint::IO_HamBC::MAP_SIZE;
				auto end = begin + BluePrint::IO_HamBC::MAP_SIZE;
				if (!io.load(std::vector<unsigned char>(begin, end), _ptrBluePrint))
				{
					return false;
				}
				bluePrints.push_back(_ptrBluePrint);
			}
		}
		else
		{
			return false;
		}

		world.setBluePrints(bluePrints);
		return true;
	}
	bool save(std::vector<unsigned char> &buffer, const World &world)
	{
		for (auto &it : world.getBluePrints())
		{
			std::vector<unsigned char> bluePrintBuffer;
			BluePrint::IO_HamBC io;
			if (!io.save(bluePrintBuffer, it))
			{
				return false;
			}
			buffer.insert(buffer.end(), bluePrintBuffer.begin(), bluePrintBuffer.end());
		}
		return true;
	}
}
namespace IO_Orig
{
	bool isType(const std::vector<unsigned char> &data)
	{
		return data.size() % BluePrint::IO_Orig::MAP_SIZE == 0;
	}
	bool load(const std::vector<unsigned char> &buffer, World &world)
	{
		std::vector<std::shared_ptr<BluePrint>> bluePrints;
		if (buffer.size() % BluePrint::IO_Orig::MAP_SIZE == 0)
		{
			int numberOfBluePrints = buffer.size() / BluePrint::IO_Orig::MAP_SIZE;
			for (int i = 0; i < numberOfBluePrints; ++i)
			{
				std::shared_ptr<BluePrint> _ptrBluePrint(new BluePrint());
				BluePrint::IO_Orig io;
				auto begin = buffer.begin() + i * BluePrint::IO_Orig::MAP_SIZE;
				auto end = begin + BluePrint::IO_Orig::MAP_SIZE;
				if (!io.load(std::vector<unsigned char>(begin, end), _ptrBluePrint))
				{
					return false;
				}
				bluePrints.push_back(_ptrBluePrint);
			}
		}
		else
		{
			return false;
		}

		world.setBluePrints(bluePrints);
		return true;
	}
	bool save(std::vector<unsigned char> &buffer, const World &world)
	{
		for (auto &it : world.getBluePrints())
		{
			std::vector<unsigned char> bluePrintBuffer;
			BluePrint::IO_Orig io;
			if (!io.save(bluePrintBuffer, it))
			{
				return false;
			}
			buffer.insert(buffer.end(), bluePrintBuffer.begin(), bluePrintBuffer.end());
		}
		return true;
	}
}

std::array<WorldIO, 3> worldIOs = {{
	{"Star one",World::VType::T_HamSt1, IO_HamSt1::isType, IO_HamSt1::load, IO_HamSt1::save,},
	{"Beta version",World::VType::T_HamBC, IO_HamBC::isType, IO_HamBC::load, IO_HamBC::save,},
	{"1991 world",World::VType::T_Orig, IO_Orig::isType, IO_Orig::load, IO_Orig::save,},
}};

bool World::load(const std::string &filename)
{
	std::vector<unsigned char> buffer;
	if (readFileToBuffer(filename, buffer))
	{
		for (auto &it : worldIOs)
		{
			if (it.isType(buffer))
			{
				return it.load(buffer, *this);
			}
		}
	}
	return false;
}

bool World::save(const std::string &filename, World::VType type)
{
	for (auto &it : worldIOs)
	{
		if (it.type == type)
		{
			std::vector<unsigned char> buffer;
			if (it.save(buffer, *this))
			{
				return writeFileFromBuffer(filename, buffer);
			}
		}
	}
	return false;
}
